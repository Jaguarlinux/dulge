#compdef dulge-alternatives dulge-checkvers dulge-create dulge-dgraph dulge-install dulge-pkgdb dulge-query dulge-reconfigure dulge-remove dulge-rindex dulge-uchroot dulge-uunshare dulge-uhelper

_dulge_common=(
	{-C,--config=-}'[Full path to configuration file]:config file:_files'
	{-d,--debug}'[Debug mode shown to stderr]'
	{-h,--help}'[Print help usage]'
	{-r,--rootdir=-}'[Full path to rootdir]:root dir:_files -/'
	{-v,--verbose}'[Verbose messages]'
	{-V,--version}'[Show DULGE version]'
)

_dulge_properties=(
	'alternatives[group and file alternatives provided by the package]'
	'architecture[target architecture the package was built for]'
	'automatic-install[package was installed automatically]'
	'build-options[enabled options the package was built with]'
	'changelog[changelog URL for the package]'
	'conf_files[configuration file(s) installed by the package]'
	'conflicts[other packages this package conflicts with]'
	'filename-sha256[hash of the package file]'
	'filename-size[size of the package file]'
	'hold[package is held and will not be updated]'
	'homepage[home URL of the package project]'
	'install-date[date when the package was installed]'
	'install-msg[post-install message provided by the package]'
	'install-script[script run when installing the package]'
	'installed_size[total size of files installed by the package]'
	'license[license(s) for distributing the package]'
	'maintainer[contact information of the maintainer of the package]'
	'metafile-sha256[hash of the plist package files metadata]'
	'pkgname[name of the package]'
	'pkgver[version of the package]'
	'preserve[package files will not be removed automatically on update]'
	'provides[virtual packages provided by the package]'
	'remove-msg[post-remove message provided by the package]'
	'remove-script[script run when removing the package]'
	'replaces[other packages that the package replaces]'
	'repolock[package only accepts updates from its original repository]'
	'repository[repository where the package was installed from]'
	'reverts[previous provided version this package replaces]'
	'run_depends[runtime dependency packages for the package]'
	'shlib-provides[shared libraries provided by the package]'
	'shlib-requires[shared libraries required by the package]'
	'short_desc[short description of the package]'
	'source-revisions[source package and commit hash of package last change from the jaguar-packages repository]'
	'state[installation state of the package]'
	'tags[list of categories the package is associated with]'
)

_dulge_all_packages() {
	compadd "$@" -- ${${${(f)"$(dulge-query -Rs '')"}#??? }%%-[^- ]# *}
}

_dulge_installed_packages() {
	compadd "$@" -- ${${${(f)"$(dulge-query -l)"}#?? }%%-[^- ]# *}
}

_dulge_alternatives_groups() {
	compadd "$@" -- ${${${(f)"$(dulge-alternatives -l)"}##? }%%-# *}
}

_dulge_alternatives() {
	_arguments -s : \
		$_dulge_common \
		-R'[Enable repository mode]' \
		'*'--repository=-'[Add repository to the top of the list]:repository url:_files -/' \
		{-i,--ignore-conf-repos}'[Ignore repositories defined in dulge.d]' \
		{-g,--group}'[Group of alternatives to match]:group:_dulge_alternatives_groups' \
		- '(mode)' \
		{-l,--list}'[List all alternatives]' \
		{-s,--set}'[Set alternatives]' \
		- '(default)' \
		'*:installed packages:_dulge_installed_packages'
}

_dulge_checkvers() {
	_arguments -s : \
		$_dulge_common \
		{-D,--distdir}'[Set the path to jaguar-packages]:path:_files -/' \
		{-i,--installed}'[Check for outdated packages in rootdir]' \
		{-m,--manual}'[Only process listed files]' \
		'*'{-R,--repository=-}'[Add repository to the top of the list]:repository url:_files -/' \
		{-i,--ignore-conf-repos}'[Ignore repositories defined in dulge.d]' \
		{-s,--show-all}'[List any binary packages which are not built]' \
		--staging'[Enable use of staged packages]' \
		'*:extra packages:_files'
}

_dulge_create() {
	_arguments -s : \
		{-A,--architecture}'[Package architecture]:architecture:(i686 i686-musl x86_64 x86_64-musl armv7l armv7l-musl armv6l armv6l-musl aarch64 aarch64-musl ppc64le ppc64le-musl ppc64 ppc64-musl ppc ppc-musl noarch)' \
		{-B,--built-with}'[Package builder string]:package builder: ' \
		{-C,--conflicts}'[Conflicts]:conflicts: ' \
		{-D,--dependencies}'[Dependencies]:dependencies: ' \
		{-F,--config-files}'[Configuration files]:configuration files: ' \
		{-H,--homepage}'[Homepage]:homepage: ' \
		{-h,--help}'[Show help]' \
		{-l,--license}'[License]:license: ' \
		{-M,--mutable-files}'[Mutable files list]:mutable files: ' \
		{-m,--maintainer}'[Maintainer]:maintainer: ' \
		{-n,--pkgver}'[Package name/version tuple]:package name/version: ' \
		{-P,--provides}'[Provides]:provides: ' \
		{-p,--preserve}'[Enable package preserve boolean]' \
		{-q,--quiet}'[Work silently]' \
		{-R,--replaces}'[Replaces]:replaces: ' \
		{-r,--reverts}'[Reverts]:reverts: ' \
		{-S,--long-desc}'[Long description]:long description: ' \
		{-s,--desc}'[Short description]:short description: ' \
		{-t,--tags}'[A list of tags/categories]:tags: ' \
		{-V,--version}'[Prints DULGE release version]' \
		--build-options'[A string with the used build options]:used build options: ' \
		--compression'[Compression format]:compression format:(gzip bzip2 xz)' \
		--shlib-provides'[List of provided shared libraries]:provided shared libraries: ' \
		--shlib-requires'[List of required shared libraries]:required shared libraries: '
}

_dulge_dgraph() {
	_arguments : \
		{-C,--config=-}'[Full path to configuration file]:config file:_files' \
		{-c,--graph-config}'[Path to configuration file]:config file:_files' \
		{-d,--debug}'[Debug mode shown to stderr]' \
		{-h,--help}'[Print help usage]' \
		{-M,--memory-sync}'[Keep remote repository data in memory only]' \
		{-r,--rootdir}'[Full path to rootdir]:root dir:_files -/' \
		{-R,--repository}'[Enable repository mode]' \
		- '(mode)' \
		{-g,--gen-config}'[Generate a default config file]' \
		{-f,--fulldeptree}'[Generate a dependency graph]' \
		{-m,--metadata}'[Generate a metadata graph]' \
		':package:_dulge_all_packages'
}


_dulge_install() {
	_arguments -s : \
		$_dulge_common \
		{-A,--automatic}'[Set automatic installation mode]' \
		{-c,--cachedir=-}'[Full path to cachedir]:cache dir:_files -/' \
		{-D,--download-only}'[Download packages and check integrity, nothing else]' \
		{-f,--force}'[Force package re-installation]' \
		{-i,--ignore-conf-repos}'[Ignore repositories defined in dulge.d]' \
		{-I,--ignore-file-conflicts}'[Ignore detected file conflicts]' \
		{-U,--unpack-only}'[Unpack packages without configuring]' \
		{-M,--memory-sync}'[Keep remote repository data in memory only]' \
		{-n,--dry-run}'[Dry-run mode]' \
		'*'{-R,--repository=-}'[Add repository to the top of the list]:repository url:_files -/' \
		{-S,--sync}'[Sync remote repository index]' \
		--reproducible'[Enable reproducible mode in pkgdb]' \
		--staging'[Enable use of staged packages]' \
		{-u,--update}'[Update target packages]' \
		{-y,--yes}'[Assume yes to all questions]' \
		'*:available packages:_dulge_all_packages'
}

_dulge_pkgdb() {
	local ret=1
	local -a checks=(files dependencies alternatives pkgdb)
	_arguments -C -s : \
		$_dulge_common \
		{-a,--all}'[Process all packages]' \
		--checks='[Choose checks to run]:check:->checks' \
		{-m,--mode}'[Change to this mode]:mode:(auto manual hold unhold repolock repounlock)' \
		{-u,--update}'[Update pkgdb to the latest format]' \
		'*:installed packages:_dulge_installed_packages' && ret=0

	case $state in
		checks)
			_values -s , "check" "${checks[@]}" && ret=0
			;;
	esac
	return $ret
}

_dulge_query() {
	local ret=1
	_arguments -s : \
		$_dulge_common \
		{-c,--cachedir=-}'[Full path to cachedir]:cache dir:_files -/' \
		{-i,--ignore-conf-repos}'[Ignore repositories defined in dulge.d]' \
		{-M,--memory-sync}'[Keep remote repository data in memory only]' \
		{-p,--property=-}'[Show properties]:property:->properties' \
		--regex'[Use Extended Regular Expressions to match]' \
		--fulldeptree'[Full dependency tree for -x/--deps]' \
		-R'[Enable repository mode]' \
		--staging'[Enable use of staged packages]' \
		'*'--repository=-'[Add repository to the top of the list]:repository url:_files -/' \
		- '(mode)' \
		{-l,--list-pkgs}'[List installed packages]' \
		{-L,--list-repos}'[List registered repositories]' \
		{-H,--list-hold-pkgs}'[List packages on hold state]' \
		{-m,--list-manual-pkgs}'[List packages installed explicitly]' \
		{-O,--list-orphans}'[List package orphans]' \
		--list-repolock-pkgs'[List packages in repolock mode]' \
		{-o,--ownedby}'[Search for package files]:package file:_files' \
		{-S,--show}'[Show information]:package:_dulge_all_packages' \
		{-s,--search}'[Search for packages]:search string: ' \
		--cat=-'[Print file from binpkg to stdout]:file name:_files:package:_dulge_all_packages' \
		{-f,--files}'[Show package files]:package:_dulge_all_packages' \
		{-x,--deps}'[Show dependencies]:package:_dulge_all_packages' \
		{-X,--revdeps}'[Show reverse dependencies]:package:_dulge_all_packages' \
		- '(default)' \
		':package:_dulge_all_packages' && ret=0

	case $state in
		properties)
			_values -s , "property" "${_dulge_properties[@]}" && ret=0
			;;
	esac
	return $ret
}

_dulge_reconfigure() {
	_arguments -s : \
		$_dulge_common \
		{-a,--all}'[Process all packages]' \
		{-f,--force}'[Force reconfiguration]' \
		{-x,--deps}'[Also process dependencies for each package]' \
		--fulldeptree'[Full dependency tree for -x/--deps]' \
		'*'{-i,--ignore}'[Ignore package for reconfigure]:installed packages:_dulge_installed_packages' \
		'*:installed packages:_dulge_installed_packages'
}

_dulge_remove() {
	_arguments -s : \
		$_dulge_common \
		{-c,--cachedir=-}'[Full path to cachedir]:cache dir:_files -/' \
 		{-F,--force-revdeps}'[Force package removal even with revdeps/unresolved shared libraries]' \
		{-f,--force}'[Force package files removal]' \
		{-O,--clean-cache}'[Remove obsolete packages in cachedir]' \
		-OO'[Remove obsolete and uninstalled packages in cachedir]' \
		{-o,--remove-orphans}'[Remove package orphans]' \
		{-n,--dry-run}'[Dry-run mode]' \
		{-R,--recursive}'[Recursively remove dependencies]' \
		{-y,--yes}'[Assume yes to all questions]' \
		'*:installed packages:_dulge_installed_packages'
}

_dulge_rindex() {
	_arguments -s : \
		{-d,--debug}'[Debug mode shown to stderr]' \
		{-f,--force}'[Force mode to overwrite entry in add mode]' \
		{-h,--help}'[Print help usage]' \
		{-v,--verbose}'[Verbose messages]' \
		{-V,--version}'[Show DULGE version]' \
		'--privkey[Path to the private key for signing]:private key path:_files' \
		'--signedby[Signature details]:signature details: ' \
		- '(mode)' \
		{-a,--add}'[Add package to repository index]' \
		{-c,--clean}'[Clean repository index]' \
		{-r,--remove-obsoletes}'[Removes obsolete packages from repository]' \
		{-s,--sign}'[Sign repository index]' \
		{-S,--sign-pkg}'[Sign binary package archive]' \
		':repository dir:_files -/' \
		'*:packages:_files'
}

_dulge_uchroot() {
	_arguments \
		'-D[distdir]:distdir:_files -/' \
		'-H[hostdir]:hostdir:_files -/' \
		'-S[shmdir]:shmdir:_files -/' \
		':chroot dir:_files -/' \
		':command: _command_names -e' \
		'*::arguments: _normal'
}

_dulge_uhelper() {
	local ret=1
	_arguments \
		$_dulge_common \
		'1:action:->actions' \
		'*:: :->args' && ret=0
	case $state in
		actions)
			_values "actions" binpkgarch binpkgver cmpver digest fetch getpkgdepname \
				getpkgname getpkgrevision getpkgversion \
				pkgmatch version real-version arch getsystemdir getname getversion
			ret=0;;
		args)
			case $words[1] in
				binpkgarch) _arguments ':binpkg:' && ret=0;;
				binpkgver) _arguments ':binpkg:' && ret=0;;
				cmpver) _arguments ':installed version: ' ':required version: ' && ret=0;;
				digest) _arguments '*:files:_files' && ret=0;;
				fetch) _arguments '*:urls: ' && ret=0;;
				getpkgdepname) _arguments '*:string: ' && ret=0;;
				getpkgname) _arguments '*:string: ' && ret=0;;
				getpkgrevision) _arguments '*:string: ' && ret=0;;
				getpkgversion) _arguments '*:string: ' && ret=0;;
				getname) _arguments '*:string: ' && ret=0;;
				getversion) _arguments '*:string: ' && ret=0;;
				pkgmatch) _arguments ':version: ' ':pattern: ' && ret=0;;
				real-version) _arguments ':package:_dulge_installed_packages' && ret=0;;
				version) _arguments ':package:_dulge_installed_packages' && ret=0;;
				arch) ret=0;;
				getsystemdir) ret=0;;
			esac
			;;
	esac
	return $ret
}

_dulge() {
	case "$service" in
		dulge-alternatives) _dulge_alternatives "$@";;
		dulge-checkvers) _dulge_checkvers "$@";;
		dulge-create) _dulge_create "$@";;
		dulge-dgraph) _dulge_dgraph "$@";;
		dulge-install) _dulge_install "$@";;
		dulge-pkgdb) _dulge_pkgdb "$@";;
		dulge-query) _dulge_query "$@";;
		dulge-reconfigure) _dulge_reconfigure "$@";;
		dulge-remove) _dulge_remove "$@";;
		dulge-rindex) _dulge_rindex "$@";;
		dulge-uchroot) _dulge_uchroot "$@";;
		dulge-uunshare) _dulge_uchroot "$@";;
		dulge-uhelper) _dulge_uhelper "$@";;
	esac
}

_dulge "$@"
